card_copurchases[1:10]
card_copurchases[1:10,]
logit_card = df_card %>%
select(Patient.Number, PatientAge, PatientSex, DrugClass, cardio)
logit_data = logit_data[logit_data[,'DrugClass'] %in% c('ANALGESICS','GASTROINTESTINAL',
'ANTIBIOTICS','ANTIARTHRITICS',
'ANTIHYPERGLYCEMICS'),]
logit_card = logit_card[logit_card[,'DrugClass'] %in% c('ANALGESICS','GASTROINTESTINAL',
'ANTIBIOTICS','ANTIARTHRITICS',
'ANTIHYPERGLYCEMICS'),]
View(logit_card)
dataset = logit_card[2:5]
dataset$PatientSex = as.character(dataset$PatientSex)
dataset$DrugClass = as.character(dataset$DrugClass)
dataset$PatientSex = factor(dataset$PatientSex)
dataset$PatientSex = factor(dataset$PatientSex,
levels = c('F','M'),
labels = c(0,1))
factor(dataset$DrugClass)
dataset$DrugClass = factor(dataset$DrugClass)
dataset$DrugClass = factor(dataset$DrugClass,
levels = c('ANALGESICS',
'ANTIARTHRITICS',
'ANTIBIOTICS',
'ANTIHYPERGLYCEMICS',
'GASTROINTESTINAL'),
labels = 1:5)
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$Diabetic, SplitRatio = 0.80)
test_set = subset(dataset, split == FALSE)
split = sample.split(dataset$cardio, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
classifier = glm(formula = cardio ~ .,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-4])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred_df = data.frame(y_pred)
cm = table(test_set[, 4], y_pred > 0.5)
library(xtable)
library(broom)
regression_sum = tidy(classifier)
dust(classifier) %>%
sprinkle(cols = c("estimate", "std.error", "statistic"), round = 2) %>%
sprinkle(cols = "p.value", fn = quote(pvalString(value))) %>%
sprinkle_colnames("Term", "Coefficient", "SE", "T-statistic",
"P-value")
library(pixiedust)
library(pixiedust)
dust(classifier) %>%
sprinkle(cols = c("estimate", "std.error", "statistic"), round = 2) %>%
sprinkle(cols = "p.value", fn = quote(pvalString(value))) %>%
sprinkle_colnames("Term", "Coefficient", "SE", "T-statistic",
"P-value")
cm
card_doctors = df_card %>%
select(Patient.Number,cardio,Doctor.Number) %>%
unique()
main_card_doctor = aggregate(card_doctors[,'cardio'],
by = list(card_doctors$Doctor.Number),
FUN = sum)
colnames(main_card_doctor) = c('Doctor','Referrals')
main_card_doctor = arrange(main_card_doctor, desc(Referrals))
ggplot(main_card_doctor[1:25,], aes(x = reorder(Doctor, Referrals), y = Referrals)) +
geom_point() +
# Flip the coordinates
ggtitle('Top 25 Doctors for Heart Medication Referrals') +
xlab('Doctor ID Number') +
theme(plot.title = element_text(hjust = 0.5, size = 12)) +
coord_flip()
kable(cm, caption = "Confusion Matrix of Logistic Regression Model on Test Set")
cm
604+192+94+766
(604+766)/(604+192+94+766)
dust(classifier) %>%
sprinkle(cols = c("estimate", "std.error", "statistic"), round = 2) %>%
sprinkle(cols = "p.value", fn = quote(pvalString(value))) %>%
sprinkle_colnames("Term", "Coefficient", "SE", "T-statistic",
"P-value")
card_doctors = df_card %>%
select(Patient.Number,cardio,Doctor.Number) %>%
unique()
main_card_doctor = aggregate(card_doctors[,'cardio'],
by = list(card_doctors$Doctor.Number),
FUN = sum)
(604+766)/1656
View(test_set)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(knitr)
data = read.csv('college_recent_grads.csv')
female_engineering = data %>%
filter(major_category == 'Engineering',
sharewomen >= 0.5) %>%
arrange(desc(sharewomen))
kable(female_engineering)
eng_bus_sum = data %>%
filter(major_category %in% c('Business','Engineering')) %>%
summarise(sum = sum(total))
rownames(eng_bus_sum) = 'Total Number'
kable(eng_bus_sum)
data = data %>%
mutate(unemployment_rate = round(unemployed*100/total,2)) %>%
arrange(desc(unemployment_rate))
top_10 = select(data, major, unemployment_rate)[1:10,]
kable(top_10)
data %>%
summarise(n(10))
library(ggplot2)
library(dplyr)
library(tidyr)
install.packages("quantmod")
library(quantmod)
start = as.Date("2016-01-01")
end = as.Date("2017-10-13")
start = as.Date("2016-01-01")
end = as.Date("2017-10-13")
aapl = getSymbols("AAPL", src = "yahoo", from = start, to = end)
aapl
View(AAPL)
View(AAPL)
install.packages('ggmap')
library(ggplot2)
library(dplyr)
library(ggmap)
states_map = map_data("state")
states_map = map_data("state")
View(states_map)
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y= lat)) +
geom_polygon()
View(states_map)
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
world_map = map_data("world")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
world_map %>%
filter(region = "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white" colr = "black")
world_map %>%
filter(region = "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
View(world_map)
world_map %>%
filter(region == "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
map_data(map = "world", region = "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon((fill = "white", color = "black"))
map_data(map = "world", region = "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon((fill = "white", color = "black"))
map_data(map = "world", region = "Canada") %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
map_data(map = "world", regeion = c("Japan","China","North Korea","South Korea","Taiwan")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
map_data(map = "world", region = c("Japan","China","North Korea","South Korea","Taiwan")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
crime_data = USArrests
states = map_data("state")
crime_data = crime_data %>%
mutate(state = rownames(crime_data))
crime_map = full_join(states,
crime_data,
by = c("region","state"))
crime_map = full_join(states,
crime_data,
by = c("region",="state"))
tolower("ABBBASS")
toupper("abbass")
crime_data = crime_data %>%
mutate(state = tolower(state))
crime_map = full_join(states,
crime_data,
by = c("region" = "state"))
ggplot(crime_map,
aes(x = long,
y = lat,
group = group,
fill = Assault)) +
geom_polygon() +
scale_fill_gradient(low = "white", high = "darkred")
ggplot(crime_map,
aes(x = long,
y = lat,
group = group,
fill = Assault)) +
geom_polygon() +
scale_fill_gradient(low = "white", high = "darkred") +
theme_dark()
usc = get_map("University of Southern California")
ggmap(USC)
ggmap(usc)
ggmap(usc, zoom = 14)
ggmap(usc, zoom = 50)
usc = get_map("University of Southern California", zoom = 14)
ggmap(usc)
usc = get_map("University of Southern California", zoom = 14,
maptype = "satellite")
ggmap(usc)
usc = get_map("University of Southern California", zoom = 14,
maptype = "roadmap")
ggmap(usc)
geocode("University of Southern California")
geocode("1460 N Mansfield Ave, LA, CA, USA")
revgeocode(c(-77.03653,38.89768))
h_map = get_map("Houston", zoom = 14, color = "bw")
ggmap(h_map)
View(crime)
dt_crimes = filter(crime,
lon >= -95.39681 & lon <= -95.34188 &
lat >= 29.73631 & lat <= 29.78500)
dt_crimes = filter(crime,
lon >= -95.39681 & lon <= -95.34188 &
lat >= 29.73631 & lat <= 29.78400)
violent_crimes = filter(dt_crimes,
offense %in% c("aggravated assault",
"murder", "rape", "robbery"))
h_map +
geom_point()
h_map +
geom_point(violent_crimes, aes(x = lon,
y = lat,
color = offense))
ggplot(h_map) +
geom_point(violent_crimes, aes(x = lon,
y = lat,
color = offense))
ggmap(h_map) +
geom_point(violent_crimes, aes(x = lon,
y = lat,
color = offense))
ggmap(h_map) +
geom_point(data = violent_crimes, aes(x = lon,
y = lat,
color = offense))
ggmap(h_map) +
geom_point(data = violent_crimes, aes(x = lon,
y = lat,
color = offense,
size = offense))
ggmap(h_map) +
stat_density2d(violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred")
map(h_map) +
stat_density2d(violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day)
ggmap(h_map) +
stat_density2d(data = violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day)
ggmap(h_map) +
stat_density2d(data = violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day, nrow = 2) +
theme(legend.position = 'none')
shiny::runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
install.packages("shinydashboard")
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
icecream = read.csv('icecream.csv')
library(scales)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rvest)
library(knitr)
library(stringr)
avgIceCreamSpending = icecream %>%
group_by(Country.or.Area) %>%
summarise(AvgSpending = mean(USDinMillions))
kable(head(avgIceCreamSpending))
View(avgIceCreamSpending)
world_data = map_data("world")
icecream_map = full_join(world_data,
avgIceCreamSpending,
by = c("region" = "Country.or.Area"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n  (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t\t (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t  (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 \- 2012.\n\t     (No data available for white area)") +
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 \\- 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
paste("Average Spending.\n",
"(No Data)")
fprint(paste("Average Spending.\n",
"(No Data)"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
icecream = read.csv('icecream.csv')
library(scales)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rvest)
library(knitr)
library(ggmap)
library(ggmap)
library(stringr)
avgIceCreamSpending = icecream %>%
group_by(Country.or.Area) %>%
summarise(AvgSpending = mean(USDinMillions))
kable(head(avgIceCreamSpending))
world_data = map_data("world")
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
icecream_map = full_join(world_data,
avgIceCreamSpending,
by = c("region" = "Country.or.Area"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
View(icecream_map)
icecream_map[is.na(icecream_map)] = 0
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
shiny::runApp('Fall 2017/DSO 545/Homeless Project/LAHomelessCT')
runApp('Fall 2017/DSO 545/Homeless Project/LAHomelessCT')
setwd("C:/Users/Fang/Desktop/USC MSBAN/Fall 2017/DSO 545/Homeless Project/LAHomelessCT")
runApp()
runApp()
library(knitr)
library(shiny)
library(leaflet)
library(shinydashboard)
library(graphics)
library(dplyr)
library(ggplot2)
library(geojsonio)
library(htmltools)
library(sp)
library(lubridate)
library(rgdal)
library(readxl)
library(rgeos)
library(maptools)
library(ggmap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('C:\\Users\\Fang\\Desktop\\USC MSBAN\\Fall 2017\\DSO 545\\Homeless Project\\LAHomelessCT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('C:\\Users\\Fang\\Desktop\\USC MSBAN\\Fall 2017\\DSO 545\\Homeless Project\\LAHomelessCT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('C:\\Users\\Fang\\Desktop\\USC MSBAN\\Fall 2017\\DSO 545\\Homeless Project\\LAHomelessCT')
